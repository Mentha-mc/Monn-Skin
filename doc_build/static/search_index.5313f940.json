[{"id":0,"title":"About US","content":"#\n\n本网站是由 Mentha 制作的\n\n点击加入我们的 QQ群 ，我们会定期更新文档\n\n文档的更新会在群里通知，群里也会有一些教程，大家可以一起学习交流\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap Code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOuput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/Monn-Skin/about/","lang":"","toc":[{"text":"Use Component","id":"use-component","depth":2,"charIndex":79},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":217},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":648},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1071},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1085},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1213},{"text":"Wrap Code","id":"wrap-code","depth":3,"charIndex":1336},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":1461},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1592}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"有关网站","content":"#\n\nSkinstudio 这是转换网站，转换注意尊重他人版权，贴图分辨率不要超过128\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap Code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOuput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/Monn-Skin/guide/","lang":"","toc":[{"text":"Use Component","id":"use-component","depth":2,"charIndex":46},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":184},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":615},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1038},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1052},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1180},{"text":"Wrap Code","id":"wrap-code","depth":3,"charIndex":1303},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":1428},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1559}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Hello World!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/Monn-Skin/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"准备","content":"#\n\n入门知识\n\n\n认识json#\n\nJSON 命名空间对象包含用于解析 JavaScript 对象表示法（JSON）和将值转换为 JSON 字符串的静态方法。\n\n描述#\n\n与大多数全局对象不同， 不是一个构造函数。不能将它与 new 运算符 一起使用，也不能将 对象作为函数调用。JSON` 的所有属性和方法都是静态的（就像\nMath 对象一样）。JSON的键必须是字符串，而值可以是字符串、数字、布尔值、对象或数组。此外，JSON不支持注释，因此在JSON文件中不应该包含任何注释。\n\nJavaScript 与 JSON 的区别#\n\nJSON 是一种语法，用来序列化对象、数组、数值、字符串、布尔值。它基于 JavaScript 语法，但与之不同：大部分 JavaScript 不是\nJSON。例如：\n\n对象和数组#\n\n属性名称必须是双引号括起来的字符串；禁止出现尾随逗号。\n\n数值#\n\n禁止出现前导零。小数点后必须至少有一位数字。不支持 和 。NaNInfinity\n\n\n工具选择#\n\n在编写《我的世界》的JSON文件时，有许多工具可供选择，这些工具可以帮助你更轻松地创建、编辑和验证JSON文件。以下是一些常用的工具：\n\n电脑#\n\n文本编辑器：如Notepad++、Sublime Text、Visual Studio\nCode等，这些编辑器提供了语法高亮、自动补全等功能，有助于编写JSON文件。\n\n在线JSON编辑器：如JSON Editor Online、Code Beautify JSON\nEditor等，这些工具允许你在浏览器中直接编辑JSON文件，并且通常提供了实时预览和格式化功能。\n\n命令行工具：如jq，这是一个强大的命令行JSON处理器，可以用于解析、过滤、转换和验证JSON文件。\n\n集成开发环境（IDE）：如IntelliJ IDEA、Eclipse等，这些IDE提供了丰富的功能，包括JSON编辑、代码提示、调试等。\n\nJSON Schema验证工具：如Ajv、JSON Schema Validator等，这些工具可以帮助你验证JSON文件是否符合特定的JSON Schema。\n\n选择哪种工具取决于你的具体需求和偏好。如果你是初学者，建议从文本编辑器或在线JSON编辑器开始，这些工具通常比较容易上手#\n\n手机#\n\n在手机上编写和编辑JSON文件可能不如在电脑上那么方便，但仍然有一些工具可以帮助你完成这项任务。以下是一些适用于手机的JSON编辑工具：\n\n文本编辑器应用：许多手机都预装了简单的文本编辑器应用，如Android上的\"文件管理器\"或iOS上的\"文件\"应用。你可以使用这些应用来打开和编辑JSON文件。虽\n然它们可能没有高级功能，但对于基本的编辑任务来说已经足够了。\n\n代码编辑器应用：有一些专为移动设备设计的代码编辑器应用，它们提供了更高级的功能，如语法高亮、代码格式化和自动完成。一些流行的代码编辑器应用包括：\n\nAndroid: QuickEdit、Jota+、Dcoder iOS: Textastic、Coda、Working Copy\n在线JSON编辑器：如果你有网络连接，可以使用在线JSON编辑器。这些工具允许你在浏览器中直接编辑JSON文件，并且通常提供了实时预览和格式化功能。一些流行的在\n线JSON编辑器包括：\n\nJSON Editor Online Code Beautify JSON Editor JSONLint 云存储服务：许多云存储服务，如Google\nDrive、Dropbox、OneDrive等，都提供了文件编辑功能。你可以将JSON文件上传到这些服务中，然后在手机上使用它们的应用程序进行编辑。\n\nJSON查看器应用：如果你只需要查看JSON文件而不需要编辑它们，可以使用JSON查看器应用。这些应用通常提供了友好的用户界面，用于浏览和搜索JSON数据。一些\n流行的JSON查看器应用包括：\n\nJSON Viewer JSON Explorer JSON Editor\n请根据你的具体需求和手机操作系统选择合适的工具。如果你需要频繁地编辑JSON文件，可能需要考虑使用更专业的代码编辑器应用或在线工具。","routePath":"/Monn-Skin/start/","lang":"","toc":[{"text":"认识json","id":"认识json","depth":2,"charIndex":9},{"text":"描述","id":"描述","depth":4,"charIndex":81},{"text":"JavaScript 与 JSON 的区别","id":"javascript-与-json-的区别","depth":4,"charIndex":244},{"text":"对象和数组","id":"对象和数组","depth":4,"charIndex":353},{"text":"数值","id":"数值","depth":4,"charIndex":390},{"text":"工具选择","id":"工具选择","depth":2,"charIndex":438},{"text":"电脑","id":"电脑","depth":4,"charIndex":514},{"text":"手机","id":"手机","depth":4,"charIndex":971}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Minecraft JSON文件详解","content":"#\n\n在《我的世界》中，皮肤包允许玩家自定义角色的外观。本文档旨在详细解释皮肤包的JSON文件结构，以便玩家和开发者能够理解和创建自定义皮肤包。\n\n\nJSON文件结构#\n\n\n根对象#\n\n皮肤包的JSON文件是一个包含皮肤包元数据和皮肤列表的根对象。\n\n\n\n皮肤列表（skins）#\n\n皮肤列表是一个数组，包含了皮肤包中所有皮肤的对象。\n\n皮肤对象属性#\n\n * localization_name：皮肤的本地化名称，用于在游戏界面中显示\n * geometry：皮肤的几何形状，定义了皮肤的外观，下面是原版默认的模型\n\n\n\n * texture：皮肤的纹理文件名，这个文件必须包含在皮肤包中\n * type：皮肤类型，通常标记为 \"free\"\n\n皮肤包元数据#\n\n * serialize_name：皮肤包的序列化名称，用于内部识别。\n * localization_name：皮肤包的本地化名称，用于在游戏界面中显示。","routePath":"/Monn-Skin/start/new/","lang":"","toc":[{"text":"JSON文件结构","id":"json文件结构","depth":2,"charIndex":74},{"text":"根对象","id":"根对象","depth":3,"charIndex":86},{"text":"皮肤列表（skins）","id":"皮肤列表skins","depth":4,"charIndex":127},{"text":"皮肤对象属性","id":"皮肤对象属性","depth":4,"charIndex":168},{"text":"皮肤包元数据","id":"皮肤包元数据","depth":4,"charIndex":322}],"domain":"","frontmatter":{},"version":""}]